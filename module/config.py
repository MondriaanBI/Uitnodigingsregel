from pathlib import Path
import numpy as np

# To train the models on your own data, change retrain_models to = True. Training on your own data can take a long time  
# depending on the size of the datasets used and the computational power of your device.
retrain_models = False

# How the output data generated by the models is saved. Change to save_method = 'csv' if you want the output to be in .csv files 
save_method = 'xlsx' 

# Define the column name that contains dropout (uitval) in the datasets and the column that has the student number (studentnummer).
dropout_column = 'Dropout'
studentnumber_column = 'Studentnummer' ## Change if needed

# Paths
PROJ_ROOT = Path(__file__).resolve().parents[1]
DATA_DIR = PROJ_ROOT/'data'
RAW_DATA_DIR = PROJ_ROOT/DATA_DIR/'raw'
INTERIM_DATA_DIR = PROJ_ROOT/DATA_DIR/'interim'
PROCESSED_DATA_DIR = PROJ_ROOT/DATA_DIR/'processed'
EXTERNAL_DATA_DIR = PROJ_ROOT/DATA_DIR/'external'
MODELS_DIR = PROJ_ROOT/'models'

# Paths for datasets
synth_data_dir_train = PROJ_ROOT/DATA_DIR/'raw'/'synth_data_train.csv'
synth_data_dir_pred = PROJ_ROOT/DATA_DIR/'raw'/'synth_data_pred.csv'
user_data_dir_train = PROJ_ROOT/DATA_DIR/'raw'/'user_data'/'train.csv'
user_data_dir_pred = PROJ_ROOT/DATA_DIR/'raw'/'user_data'/'pred.csv'

# Define constants for RF, lasso and SVM
random_seed = 42

# Parameters for the Gridsearches of the Random Forest, Lasso regression and the Support Vector Machine models
rf_parameters = {
    'bootstrap': [True, False],
    'max_depth': [2, 3, 4],
    'max_features': [3, 4, 5],
    'min_samples_leaf': [3, 4, 5],
    'min_samples_split': [2, 3, 5],
    'n_estimators': [100, 200, 300]}

alpha_range = np.arange(0.01, 2, 0.01)

svm_parameters = {'C': [0.1, 1, 10, 100, 1000], 'gamma': [0.0001, 0.001, 0.01, 0.1, 1], 'kernel': ['rbf']}
 